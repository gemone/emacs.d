#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+PROPERTY: header-args:shell :tangle ./setup.sh :mkdirp yes
#+PROPERTY: header-args:powershell :tangle ./setup.ps1 :mkdirp yes

本配置基于 [[https://github.com/daviwil/emacs-from-scratch][daviwil/emacs-from-scratch]] 做的调整,有兴趣可以访问仓库从头配置属于自己的访问配置.此处主要是适配我的工作环境,同时尝试添加 =Windows= 和 =Linux= 两端支持.

* Tangle

This snippet adds a hook to =org-mode= buffers so that =emaconf/org-babel-tangle= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun emaconf/org-babel-tangle ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'emaconf/org-babel-tangle)))
#+end_src

** Babel Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

* Function

#+begin_src emacs-lisp
  (defun executable-exists-p(exe)
    (f-exists-p (executable-find exe)))
#+end_src

* Variable

You can define variable here.

** Define System type

#+begin_src emacs-lisp
  (defconst *is-mac* (string-equal system-type "darwin"))
  (defconst *is-linux* (string-equal system-type "gnu/linux"))
  (defconst *is-win* (string-equal system-type "windows-nt"))
#+end_src

#+NAME: pip-install-args
#+begin_src emacs-lisp :tangle no
"--trusted-host mirrors.huaweicloud.com -i https://mirrors.huaweicloud.com/repository/pypi/simple"
#+end_src

#+NAME: npm-install-args
#+begin_src emacs-lisp :tangle no
"--global --prefix ./etc/npm --registry=https://mirrors.huaweicloud.com/repository/npm/"
#+end_src

** Local init

Before other config.

#+begin_src emacs-lisp
  (setq init-local-file (locate-user-emacs-file "init.local.el"))
  (when (file-exists-p init-local-file)
    (load init-local-file))
#+end_src

** Python venv

- Linux: =bash setup.sh=
- Windows: =pwsh setup.ps1=

#+NAME: python-venv
#+begin_src emacs-lisp :tangle no
"./etc/python-venv"
#+end_src

#+NAME: add-venv
#+begin_src emacs-lisp :tangle no :var venv=python-venv
  (concat "python3 -m venv " venv)
#+end_src

For Linux:

#+begin_src shell :noweb yes
  # For Linux
  <<add-venv()>>
  source <<python-venv()>>/bin/activate
#+end_src

For Windows:

#+begin_src powershell :noweb yes
  <<add-venv()>>
  <<python-venv()>>/Scripts/Activate.ps1
#+end_src

Add venv python to exec-path.

#+begin_src emacs-lisp :var venv=python-venv
  (add-to-list 'exec-path (expand-file-name
  			 (concat venv (cond (*is-win* "/Scripts")
  					    (t "/bin")))
  			 user-emacs-directory))
#+end_src

=pip3 install=

#+NAME: pip-install
#+begin_src emacs-lisp :tangle no :var package="" args=pip-install-args
  (concat "pip3 install -U " args " " package)
#+end_src

=shell-interpreter=, use =pyvenv= to handle

#+begin_src emacs-lisp :var venv=python-venv
  (setenv "DEFAULT_PYTHON_ENV" (expand-file-name venv user-emacs-directory))
  (setenv "PYTHONIOENCODING" "utf-8")
#+end_src

** Node prefix

=npm install= with prefix.

#+NAME: bash-npm-install
#+begin_src emacs-lisp :tangle no :var args=npm-install-args package=""
  (concat "[[ -e `which npm` ]] && npm install " args " " package)
#+end_src

#+NAME: pwsh-npm-install
#+begin_src emacs-lisp :tangle no :var package="" args=npm-install-args
  (concat "if (Test-Path (where.exe npm)) {
    npm install --prefix " args " "  package
    "
  }")
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'exec-path (expand-file-name "./etc/npm/bin" user-emacs-directory))
#+end_src

** Cargo/Rust

#+begin_src emacs-lisp
  (when (file-exists-p "~/.cargo/bin/cargo")
    (add-to-list 'exec-path "~/.cargo/bin"))
#+end_src

** For other bin

#+begin_src shell
  mkdir ./etc/bin
#+end_src

#+begin_src powershell
  mkdir ./etc/bin
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'exec-path (expand-file-name "./etc/bin" user-emacs-directory))
#+end_src

* Locale

From [[https://github.com/purcell/emacs.d/blob/master/lisp/init-locales.el][purcell/emacs.d/lisp/init-locales.el]]

#+begin_src emacs-lisp
  (defun sanityinc/locale-var-encoding (v)
    "Return the encoding portion of the locale string V, or nil if missing."
    (when v
      (save-match-data
        (let ((case-fold-search t))
          (when (string-match "\\.\\([^.]*\\)\\'" v)
            (intern (downcase (match-string 1 v))))))))

  (dolist (varname '("LC_ALL" "LANG" "LC_CTYPE"))
    (let ((encoding (sanityinc/locale-var-encoding (getenv varname))))
      (unless (memq encoding '(nil utf8 utf-8))
        (message "Warning: non-UTF8 encoding in environment variable %s may cause interop problems with this Emacs configuration." varname))))

  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
#+end_src

Set default encode =utf-8=.

#+begin_src emacs-lisp :tangle ./early-init.el
  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8)
  (setq system-time-locale "C")
#+end_src

** Git Locale

For Linux.

#+begin_src shell
  git config --global core.autocrlf input 
#+end_src

For Windows.

#+begin_src powershell
  git config --global core.autocrlf true
#+end_src

** Windows filename encode

#+begin_src emacs-lisp
  (when *is-win*
    (setq locale-coding-system 'gb18030)  ;此句保证中文字体设置有效
    (setq w32-unicode-filenames 'nil)       ; 确保file-name-coding-system变量的设置不会无效
    (setq file-name-coding-system 'gb18030) ; 设置文件名的编码为gb18030
    )
#+end_src

* Startup Performance

#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun emaconf/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'emaconf/display-startup-time)
#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration. [[https://github.com/radian-software/straight.el][straight.el]] is a purely functional package manager to make it a lot easier to automate the installation and configuration of everything. Configure use-package to use straight.el by default.

#+begin_src emacs-lisp :tangle ./early-init.el
  (setq package-enable-at-startup nil)
#+end_src

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)

  (use-package el-patch)
#+end_src

** Package Updates

You can also use =M-x straight-pull-package= to update right now!

* Keep Folders Clean

[[https://github.com/emacscollective/no-littering][no-littering]] helps keeping ~/.emaconf/emacs clean.

#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* UI Configuration

** Basic

Remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)			; Disable visible scroolbar
  (tool-bar-mode -1)			; Disable the toolbar
  (tooltip-mode -1)			; Disable tooltips
  (set-fringe-mode -1)			; Give some breathing room

  (menu-bar-mode -1)			; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font

Use =CaskaydiaCove Nerd Font Mono=, and maybe is =CaskaydiaCove NFM=.

Pass a list to the function, sequentially check whether the font exists, return the existing fonts, and use them to adapt to inconsistent font names across systems.

#+begin_src emacs-lisp
  (defun cond-fonts(fonts)
    (catch 'font
      (dolist (font fonts)
        (when (member font (font-family-list))
          (throw 'font font)))))
#+end_src

Configure the default font here.

#+begin_src emacs-lisp
  (defconst *default-family* (cond-fonts
                              '(
                                "CaskaydiaCove Nerd Font Mono"
                                "CaskaydiaCove NFM"
                                "JetBrainsMono Nerd Font Mono"
                                "JetBrainsMono NFM"
                                )))
  (defconst *default-font-size* 140)
#+end_src

Use [[https://protesilaos.com/emacs/fontaine][fontaine]] to custom fonts.

#+begin_src emacs-lisp
  ;; set default font
  (set-face-attribute 'default nil :font *default-family* :height *default-font-size*)

  ;; set emoji font
  (set-fontset-font
   t
   (if (version< emacs-version "28.1")
       '(#x1f300 . #x1fad0)
     'emoji)
   (cond
    ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
    ((member "Symbola" (font-family-list)) "Symbola")
    ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
    ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
    ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
    ))

  ;; set Chinese font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font
     (frame-parameter nil 'font)
     charset
     (font-spec :family
                (cond
                 ((eq system-type 'darwin)
                  (cond
                   ((member "PingFang SC" (font-family-list)) "PingFang SC")
                   ((member "WenQuanYi Zen Hei" (font-family-list)) "WenQuanYi Zen Hei")
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   ))
                 ((eq system-type 'gnu/linux)
                  (cond
                   ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei")
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   ))
                 (t
                  (cond
                   ((member "Sarasa Term SC Nerd" (font-family-list)) "Sarasa Term SC Nerd")
                   ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
                   )))
                )))

  ;; set Chinese font scale
  (setq face-font-rescale-alist `(
                                  ("Symbola"             . 1.3)
                                  ("Microsoft YaHei"     . 1.2)
                                  ("WenQuanYi Zen Hei"   . 1.2)
                                  ("Sarasa Term SC Nerd" . 1.2)
                                  ("PingFang SC"         . 1.16)
                                  ("Lantinghei SC"       . 1.16)
                                  ("Kaiti SC"            . 1.16)
                                  ("Yuanti SC"           . 1.16)
                                  ("Apple Color Emoji"   . 0.91)
                                  ))
#+end_src

#+RESULTS:

** Theme

Set basic theme =modus=

#+begin_src emacs-lisp
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t)

  (load-theme 'modus-vivendi t)
  ;; (load-theme 'modus-operandi t)
#+end_src

Change to =dracula=

#+begin_src emacs-lisp
  (use-package dracula-theme
    :init
    (load-theme 'dracula t))
#+end_src

** Betther Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

Nerd-icons.el is a library for easily using Nerd Font icons inside Emacs, an alternative to all-the-icons. You can use =M-x nerd-icons-install-fonts= to install Symbols Nerd Fonts Mono for you. Note that for Windows you’ll need to manually install the font after you used this function.

#+begin_src emacs-lisp
  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    :config
    (when (and (not *is-win*)
               (and (display-graphic-p)
                    (not (member nerd-icons-font-family (font-family-list)))))
      (nerd-icons-install-fonts t)))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 12)))
#+end_src

* Keybinding

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer emaconf/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (emaconf/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.config/emacs/README.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* Utils

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy counsel nerd-icons-ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package nerd-icons-ivy-rich
    :init
    (nerd-icons-ivy-rich-mode 1))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

*** Improved Candidate Sorting with prescient.el

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (setq delete-by-moving-to-trash t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    (add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;; (setq dired-open-extensions '(("png" . "feh")
    ;; ("mkv" . "mpv")))
    )

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

#+RESULTS:
| dired-hide-dotfiles-mode | nerd-icons-dired-mode |

** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

  (use-package treemacs-nerd-icons
    :config
    (treemacs-load-theme "nerd-icons"))

  (treemacs-start-on-boot)
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic Config

#+begin_src emacs-lisp
  (defun emaconf/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :straight nil
    :commands (org-capture org-agenda)
    :hook (org-mode . emaconf/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun emaconf/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . emaconf/org-mode-visual-fill))

#+end_src

* Markdown Mode

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
                ("C-c C-e" . markdown-do)))
#+end_src

* Development

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit
    :init
    (setq forge-add-default-binding nil))
#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :diminish
    :bind (("M-/" . evilnc-comment-or-uncomment-lines)
           :map evil-normal-state-map
           ("gcc" . evilnc-comment-or-uncomment-lines)))
#+end_src


** Revert

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** Pair mode

#+begin_src emacs-lisp
  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode) 
    (text-mode . smartparens-mode) 
    :config
    ;; load default config
    (require 'smartparens-config))
#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Terminal

#+begin_src emacs-lisp
  (defun emaconf/configure-shell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-commond-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-define-key '(insert) eshell-mode-map (kbd "C-a") 'eshell-bol)
    (evil-define-key '(insert) eshell-mode-map (kbd "C-e") 'eshell-show-maximum-output)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input nil))

  (use-package eshell-git-prompt)
  (use-package eshell
    :straight nil
    :hook (eshell-first-time-mode . emaconf/configure-shell)
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

** Autocompletion

*** corfu

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-quit-at-boundary 'separator)
    (corfu-echo-documentation 0.25)
    :bind (:map corfu-map
                ("M-SPC" . corfu-insert-separator)
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("C-n" . corfu-next)
                ("C-j" . corfu-next)
                ("S-TAB" . corfu-previous)
                ([backtab] . corfu-previous)
                ("C-p" . corfu-previous)
                ("C-k" . corfu-previous)
                ("S-<return>" . corfu-insert))
    :init
    (global-corfu-mode)
    (corfu-history-mode)
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-not-match t
                                     corfu-auto nil)
                (corfu-mode))))
#+end_src

*** orderless

#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Tune the global completion style settings to your liking!
    ;; This affects the minibuffer and non-lsp completion at point.
    (setq completion-styles '(orderless partial-completion basic)
          completion-category-defaults nil
          completion-category-overrides nil))
#+end_src

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

Install [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]. lsp-mode is already suitable for the current usage scenario and has multi terminal support.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :diminish
    :preface
    (setq read-process-output-max (* 1024 1024)) ; 1MB
    (setenv "LSP_USE_PLISTS" "true")
    :custom
    (lsp-completion-provider :none)
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    (defun emaconf/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless
    :bind (:map lsp-mode-map
                ("C-c C-d" . lsp-describe-thing-at-point)
                ([remap xref-find-definitions] . lsp-find-definition)
                ([remap xref-find-references] . lsp-find-references)
                :map evil-normal-state-map
                ("gh" . lsp-describe-thing-at-point))
    :hook
    (prog-mode . lsp-deferred)
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-completion-mode . emaconf/lsp-mode-setup-completion)
    :commands lsp
    :config
    (setq lsp-idle-delay 0.5
          lsp-enable-symbol-highlighting t
          lsp-enable-snippet nil))
#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (
           :map evil-normal-state-map
           ("gd" . lsp-ui-peek-find-definitions)
           ("gr" . lsp-ui-peek-find-references))
    :config (setq lsp-ui-sideline-show-hover t
                  lsp-ui-sideline-delay 0.5
                  lsp-ui-doc-delay 5
                  lsp-ui-sideline-ignore-duplicates t
                  lsp-ui-doc-position 'bottom
                  lsp-ui-doc-alignment 'frame
                  lsp-ui-doc-header nil
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-use-childframe t))
#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after lsp)
#+end_src

*** Debug Adapter

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp
  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger")))
#+end_src

*** Python

#+NAME: python-lsp
ruff-lsp pyright jupyterlab jupyter-console

#+begin_src shell :noweb yes
  <<pip-install(package=python-lsp)>>
#+end_src

#+begin_src powershell :noweb yes
  <<pip-install(package=python-lsp)>>
#+end_src

#+begin_src emacs-lisp :noweb yes
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))
#+end_src

#+begin_src emacs-lisp
  (use-package jupyter
    :init
    (setq jupyter-repl-echo-eval-p t))
#+end_src

#+begin_src emacs-lisp
  (use-package pyvenv
    :config
    (pyvenv-mode t)
    (pyvenv-workon (getenv "DEFAULT_PYTHON_ENV"))

    ;; Set correct Python interpreter
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))

  (use-package auto-virtualenv
    :after pyvenv
    :hook
    (python-mode . auto-virtualenv-set-virtualenv))
#+end_src

*** Shell

**** Powershell

#+begin_src emacs-lisp
  (use-package powershell)
#+end_src

**** Bash

Install LSP client.

#+NAME: bash-lsp
#+begin_src emacs-lisp :tangle no
  "bash-language-server"
#+end_src

#+begin_src shell :noweb yes
  <<bash-npm-install(package=bash-lsp)>>
#+end_src

#+begin_src powershell :noweb yes
  <<pwsh-npm-install(package=bash-lsp)>>
#+end_src

Config =lsp-mode=

#+begin_src emacs-lisp
  (add-hook 'shell-mode (lambda() (lsp-deferred)))
#+end_src

*** JavaScript/Typescript

#+NAME: ts-lsp
#+begin_src emacs-lisp :tangle no
  "typescript-language-server typescript eslint"
#+end_src

For shell

#+begin_src shell :noweb yes
  <<bash-npm-install(package=ts-lsp)>>
#+end_src

#+begin_src powershell :noweb yes
  <<pwsh-npm-install(package=ts-lsp)>>
#+end_src

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))
#+end_src

*** Zig

Install [[https://github.com/zigtools/zls/wiki/Installation][=zls=]] here.

For Linux System, please use =bash setup.sh=.

#+begin_src shell
  function install_zls() {
      [[ -e `which zig` ]] || return
      [[ ! -d .cache/download ]] && mkdir .cache/download -p
      download_file=.cache/download/zls.tar.xz
      bin_path=./etc/bin/

      current_arch=$(uname -m)
      current_system=$(uname -s)
      version=$(zig version)
      
      # I don't known how to define macos system. sorry.
      # please use bash to execute
      wget https://github.com/zigtools/zls/releases/download/${version}/zls-${current_arch,,}-${current_system,,}.tar.xz -O ${download_file}
      tar xvf ${download_file} --directory ${bin_path}
      chmod +x ${bin_path}/zls
      rm -rf ${download_file}
      mkdir -p ./var/zls
      mv ${bin_path}/{LICENSE,README.md} ./var/zls
  }

  install_zls
#+end_src

For Windows System.

#+begin_src powershell
  function Install-ZLS {
      $dowload_path='.cache/download'
      del $download_path -Recurse -Force -Confirm:$false
      mkdir $download_path
      if (Test-Path (where.exe zig)) {
  	$bin_path="./etc/bin"
  	$var_path="./var/zls"
  	del $var_path -Recurse -Force -Confirm:$false
  	del $bin_path/zls.exe -Recurse -Force -Confirm:$false
  	mkdir $var_path

  	$arch=Switch ([intptr]::Size) {
              4 {"x86"}
              8 {"x86_64"}      
  	}
  	$version=(zig version)
  	$url="https://github.com/zigtools/zls/releases/download/$version/zls-$arch-windows.zip"
  	$dest="./.cache/download/zls.zip"
  	Invoke-WebRequest -Uri $url -OutFile $dest
  	Expand-Archive $dest -DestinationPath $var_path -Force
  	mv $var_path/zls.exe $bin_path
      }
      del $download_path -Recurse -Force -Confirm:$false
  }
#+end_src

#+begin_src emacs-lisp
  (when (executable-exists-p "zig")
    (use-package zig-mode))
#+end_src

*** HTML/CSS/JSON/ESLint 

#+NAME: lsp-extracted
#+begin_src emacs-lisp :tangle no
  "vscode-langservers-extracted"
#+end_src

#+begin_src shell :noweb yes
  <<bash-npm-install(package=lsp-extracted)>>
#+end_src

#+begin_src powershell :noweb yes
  <<pwsh-npm-install(package=lsp-extracted)>>
#+end_src

* Custom

After other config.

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
